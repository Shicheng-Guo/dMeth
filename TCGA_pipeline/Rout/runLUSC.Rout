
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(data.table)
> library(scales)
> library(stringr)
> library(e1071)
> library(ggplot2)
Registered S3 methods overwritten by 'ggplot2':
  method         from 
  [.quosures     rlang
  c.quosures     rlang
  print.quosures rlang
> library(MASS)
> library(gridExtra)
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> library(quadprog)
> #library(EMeth)
> 
> # the raw data of DNA metylation is too large to be kept in gitHub
> # here is the local path for DNA methylation data
> path.data = "~/Hutch-Research/Data/Real"
> path.work = '~/dMeth/TCGA_pipeline'
> source('~/EMeth/EMeth/R/emeth.R')
> source('~/EMeth/EMeth/R/utils.R')
> source('~/EMeth/EMeth/R/cv.emeth.R')
> source('~/EMeth/source/_lib.R')
> # ------------------------------------------------------------
> # read in pure cell type data
> # ------------------------------------------------------------
> 
> path.ref = "../cell_type_specific_reference/data"
> 
> info = fread(file.path(path.ref, "methylation_pure_ct_info.txt.gz"))
Registered S3 method overwritten by 'R.oo':
  method        from       
  throw.default R.methodsS3
> dim(info)
[1] 220886     31
> info[1:2,]
           ID       Name Infinium_Design_Type Next_Base Color_Channel
1: cg00000029 cg00000029                   II                        
2: cg00000236 cg00000236                   II                        
   Genome_Build CHR  MAPINFO Chromosome_36 Coordinate_36 Strand Probe_SNPs
1:           37  16 53468112            16      52025613      F         NA
2:           37   8 42263294             8      42382451      R         NA
   Probe_SNPs_10 Random_Loci Methyl27_Loci UCSC_RefGene_Name
1:            NA          NA            NA              RBL2
2:            NA          NA            NA       VDAC3;VDAC3
   UCSC_RefGene_Accession UCSC_RefGene_Group   UCSC_CpG_Islands_Name
1:              NM_005611            TSS1500 chr16:53468284-53469209
2: NM_005662;NM_001135694        3'UTR;3'UTR                        
   Relation_to_UCSC_CpG_Island Phantom DMR Enhancer HMM_Island
1:                     N_Shore                   NA           
2:                                               NA           
   Regulatory_Feature_Name Regulatory_Feature_Group  DHS RANGE_START RANGE_END
1:    16:53467838-53469685      Promoter_Associated TRUE    53468112  53468235
2:                                                    NA    42263294  42263417
       RANGE_GB SPOT_ID
1:  NC_000016.9      NA
2: NC_000008.10      NA
> 
> dat = fread(file.path(path.ref, 
+                       "methylation_pure_ct_rmPC2_data_signif4.txt.gz"))
> dim(dat)
[1] 220886    189
> dat[1:2,1:5]
   GSM861653 GSM861654 GSM861655 GSM861656 GSM861657
1:    0.6328    0.6211    0.6287    0.6397    0.6260
2:    0.8424    0.8050    0.8104    0.8338    0.8415
> 
> sam = fread(file.path(path.ref, "methylation_pure_ct_sample.txt"))
> dim(sam)
[1] 189   3
> sam[1:2,]
          id label   study
1: GSM861653  CD4T Reinius
2: GSM861654  CD4T Reinius
> 
> table(names(dat) == sam$id)

TRUE 
 189 
> 
> dat = data.matrix(dat)
> table(sam$label)

         B       CD4T       CD8T   Monocyte Neutrophil         NK       Treg 
         6         60         37         40         21         21          4 
> rownames(dat) = info$ID
> 
> # ------------------------------------------------------------
> # read DNA methylation data
> # ------------------------------------------------------------
> setwd('~/Hutch-Research/Data/Real')
> datM = fread(file = "lusc_methylation.txt", header=TRUE)
> sampinfo = fread('lusc_sample_info.txt',header = FALSE)
> cpg <- unlist(datM[,1])
> colnames(datM) <- gsub('^X',"",colnames(datM))
> datM <- datM[,-1]
> rownames(datM) = cpg
> 
> dir0 = "../TCGA_results/clinical_data/"
> setwd('~/dMeth/TCGA_pipeline/')
> tcga_purity = fread(paste0(dir0, "TCGA_mastercalls.abs_tables_JSedit.fixed.txt"))
> barcode = list()
> base_string = '%s-%s-%s'
> for(i in 1:length(tcga_purity$array)){
+   v1 <- strsplit(tcga_purity$array[i],'-')[[1]][1:3]
+   temp <- do.call(sprintf,c(fmt = base_string, as.list(v1)))
+   barcode = c(barcode,temp)
+ }
> sampbcr <- sampinfo[,2]
> uniq_bcr <- barcode[!(duplicated(barcode)|duplicated(barcode,fromLast = TRUE))]
> sampbcr <- sampbcr[!(duplicated(sampbcr)|duplicated(sampbcr,fromLast = TRUE))]
> sampinfo <- sampinfo[which(unlist(sampinfo[,2]) %in% unlist(sampbcr)),]
> ind <- which(sampinfo$V2 %in% barcode)
> mat2 <- unlist(intersect(unlist(sampinfo[,2]),barcode))
> 
> patient_id <- sampinfo$V3[match(mat2, sampinfo$V2)] 
> datM <- subset(datM, select = patient_id)
> 
> purity <- tcga_purity[match(mat2,barcode),]
> purity$patient_id <- patient_id
> filena <- which(is.na(purity$purity))
> purity <- subset(purity, !is.na(purity))
> rownames(purity) <- purity$patient_id
> if(length(filena) > 0){
+ datM <- subset(datM, select = -filena)
+ }
> rownames(datM) <- cpg
> dim(datM)
[1] 396065    319
> 
> 
> # ------------------------------------------------------------
> # read in probes to be used
> # ------------------------------------------------------------
> 
> load(file.path(path.ref, "ref_966probes.RData"))
> ls()
 [1] "barcode"                       "base_string"                  
 [3] "bclassE"                       "cpg"                          
 [5] "cv.emeth"                      "dat"                          
 [7] "datM"                          "deconv.init"                  
 [9] "deconvEM"                      "deconvEM_CV"                  
[11] "deconvEM_CV_laplace"           "deconvEM_laplace"             
[13] "dir0"                          "dlaplace"                     
[15] "emeth"                         "enet"                         
[17] "estmu"                         "filena"                       
[19] "filterGene"                    "getCT"                        
[21] "glm.log.normal"                "i"                            
[23] "ind"                           "info"                         
[25] "iOverlap"                      "log.normal.mixture"           
[27] "log.normal.mixture.binary"     "log.normal.mixture.knownRho"  
[29] "log.normal.mixture.knownScale" "ls.log.normal"                
[31] "mat2"                          "mixEM"                        
[33] "normal.mixture.binary"         "path.data"                    
[35] "path.ref"                      "path.work"                    
[37] "patient_id"                    "plot1"                        
[39] "probe2use"                     "probeFilterRsq"               
[41] "probeSelect"                   "purity"                       
[43] "rdirichlet"                    "sam"                          
[45] "sampbcr"                       "sampinfo"                     
[47] "tcga_purity"                   "temp"                         
[49] "uniq_bcr"                      "v1"                           
[51] "wls"                           "wls_signal"                   
[53] "wls.log.normal"                "wlsEM"                        
> length(probe2use)
[1] 966
> length(unique(probe2use))
[1] 966
> 
> table(probe2use %in% rownames(datM))

TRUE 
 966 
> table(probe2use %in% rownames(dat))

TRUE 
 966 
> 
> X  = dat[match(probe2use, rownames(dat)),]
> dim(X)
[1] 966 189
> X[1:2,1:5]
           GSM861653 GSM861654 GSM861655 GSM861656 GSM861657
cg10472651    0.4202    0.4898    0.4347    0.5290    0.4395
cg27603015    0.6243    0.6421    0.6768    0.6456    0.7165
> 
> dim(sam)
[1] 189   3
> table(sam$id == colnames(X))

TRUE 
 189 
> table(sam$label)

         B       CD4T       CD8T   Monocyte Neutrophil         NK       Treg 
         6         60         37         40         21         21          4 
> cellTypes = unique(sam$label)
> 
> # ------------------------------------------------------------
> # extract methylation data from tumor samples
> # ------------------------------------------------------------
> 
> ys = datM[match(rownames(X), rownames(datM)),]
> dim(ys)
[1] 966 319
> ys[1:2,1:5]
       5782     5783     5784     5786     5787
1: 0.408269 0.437077 0.487562 0.656026 0.613856
2: 0.860850 0.589011 0.719621 0.848772 0.873558
> 
> ys_na      = which(apply(is.na(ys),2,any))
> eta_abs_na = which(is.na(purity$purity))
> 
> any.na = union(ys_na,eta_abs_na)
> any.na
 [1]   1  17  20  21  23  61  70  72  82 105 113 115 142 152 153 154 169 207 242
[20] 291 298 312
> 
> ys = subset(ys,select = -any.na)
> purity <- purity[-any.na,]
> 
> dim(ys)
[1] 966 297
> ys[1:2,1:5]
       5783     5784     5786     5787     4593
1: 0.437077 0.487562 0.656026 0.613856 0.212307
2: 0.589011 0.719621 0.848772 0.873558 0.515075
> table(colnames(ys) == purity$patient_id)

TRUE 
 297 
> #-------------------------------------------------------------
> # Estimate Mean Matrix mu
> #-------------------------------------------------------------
> 
> mu = matrix(NA, nrow = dim(X)[1], ncol = length(cellTypes))
> s2 = matrix(NA, nrow = dim(X)[1], ncol = length(cellTypes))
> 
> row.names(mu) = row.names(s2) = rownames(X)
> colnames(mu)  = colnames(s2)  = cellTypes
> 
> for(ct in cellTypes){
+   sam.ct = unlist(sam[which(sam[,2]==ct),1])
+   dat.ct = X[,sam.ct]
+   mu[,ct] = rowMeans(dat.ct,na.rm=TRUE)
+   s2[,ct] = apply(dat.ct,1,sd,na.rm = TRUE)^2
+ }
> 
> #----------------------------------------------------------------------
> # Read Estimation from Expression Data, take intersection of the 
> # samples with cell type estimation from expression and DNA methylation
> #----------------------------------------------------------------------
> 
> fnm = '_cibersortx_results/LUSC_composition_cibersortx.txt'
> est_expr = fread(fnm)
> dim(est_expr)
[1] 498  26
> est_expr[1:2,]
   Mixture B cells naive B cells memory Plasma cells T cells CD8
1:    1076    0.08405719              0   0.06337982  0.00603491
2:    6546    0.07571695              0   0.18338322  0.08673695
   T cells CD4 naive T cells CD4 memory resting T cells CD4 memory activated
1:                 0                  0.1632327                   0.03610742
2:                 0                  0.1546116                   0.04051562
   T cells follicular helper T cells regulatory (Tregs) T cells gamma delta
1:              0.0008791291                0.005042942                   0
2:              0.0248183579                0.008626901                   0
   NK cells resting NK cells activated   Monocytes Macrophages M0
1:       0.04724587                  0 0.000000000      0.3658995
2:       0.04721641                  0 0.001836468      0.2095473
   Macrophages M1 Macrophages M2 Dendritic cells resting
1:     0.02586629     0.15765804                       0
2:     0.06119442     0.09507554                       0
   Dendritic cells activated Mast cells resting Mast cells activated
1:                0.02213275         0.01883492          0.000000000
2:                0.00000000         0.00127299          0.008539707
   Eosinophils  Neutrophils P-value Correlation      RMSE
1:           0 0.0036285698       0   0.7131286 0.7381640
2:           0 0.0009075904       0   0.5871028 0.8195798
> 
> samname  = str_replace(est_expr$Mixture, "^X", "")
> length(samname)
[1] 498
> samname[1:5]
[1] "1076" "6546" "A50Z" "3409" "7809"
> 
> est_expr = data.matrix(est_expr[,-1])
> rownames(est_expr) = samname
> dim(est_expr)
[1] 498  25
> est_expr[1:2,]
     B cells naive B cells memory Plasma cells T cells CD8 T cells CD4 naive
1076    0.08405719              0   0.06337982  0.00603491                 0
6546    0.07571695              0   0.18338322  0.08673695                 0
     T cells CD4 memory resting T cells CD4 memory activated
1076                  0.1632327                   0.03610742
6546                  0.1546116                   0.04051562
     T cells follicular helper T cells regulatory (Tregs) T cells gamma delta
1076              0.0008791291                0.005042942                   0
6546              0.0248183579                0.008626901                   0
     NK cells resting NK cells activated   Monocytes Macrophages M0
1076       0.04724587                  0 0.000000000      0.3658995
6546       0.04721641                  0 0.001836468      0.2095473
     Macrophages M1 Macrophages M2 Dendritic cells resting
1076     0.02586629     0.15765804                       0
6546     0.06119442     0.09507554                       0
     Dendritic cells activated Mast cells resting Mast cells activated
1076                0.02213275         0.01883492          0.000000000
6546                0.00000000         0.00127299          0.008539707
     Eosinophils  Neutrophils P-value Correlation      RMSE
1076           0 0.0036285698       0   0.7131286 0.7381640
6546           0 0.0009075904       0   0.5871028 0.8195798
> 
> com_sample = intersect(rownames(est_expr), colnames(ys))
> length(com_sample)
[1] 296
> 
> est_expr = est_expr[match(com_sample,rownames(est_expr)),]
> dim(est_expr)
[1] 296  25
> est_expr[1:2,]
     B cells naive B cells memory Plasma cells T cells CD8 T cells CD4 naive
6546    0.07571695              0   0.18338322  0.08673695                 0
A50Z    0.02738592              0   0.06808345  0.00000000                 0
     T cells CD4 memory resting T cells CD4 memory activated
6546                  0.1546116                   0.04051562
A50Z                  0.1844538                   0.00000000
     T cells follicular helper T cells regulatory (Tregs) T cells gamma delta
6546                0.02481836                0.008626901                   0
A50Z                0.00000000                0.026482081                   0
     NK cells resting NK cells activated   Monocytes Macrophages M0
6546       0.04721641         0.00000000 0.001836468      0.2095473
A50Z       0.07193198         0.06690476 0.000000000      0.1379699
     Macrophages M1 Macrophages M2 Dendritic cells resting
6546     0.06119442     0.09507554                       0
A50Z     0.01454007     0.07448676                       0
     Dendritic cells activated Mast cells resting Mast cells activated
6546                0.00000000         0.00127299          0.008539707
A50Z                0.08859275         0.08828299          0.000000000
     Eosinophils  Neutrophils P-value Correlation      RMSE
6546           0 0.0009075904       0   0.5871028 0.8195798
A50Z           0 0.1508855402       0   0.4703080 0.8829238
> 
> ys     = subset(ys,select = match(com_sample,colnames(ys)))
> eta <- purity
> eta = eta[match(com_sample,eta$patient_id)]
> dim(ys)
[1] 966 296
> ys[1:2,1:4]
       6546     A50Z     7809      8083
1: 0.648088 0.317042 0.553435 0.2131430
2: 0.643890 0.610577 0.816653 0.0891496
> 
> table(colnames(ys) == rownames(est_expr))

TRUE 
 296 
> table(rownames(ys) == rownames(mu))

FALSE 
  966 
> 
> #----------------------------------------------------------------------
> # collapse cell types from expression data into fewer cell types
> #----------------------------------------------------------------------
> 
> deconv_expr = matrix(NA, nrow = nrow(est_expr),ncol = length(cellTypes))
> colnames(deconv_expr) = cellTypes 
> rownames(deconv_expr) = rownames(est_expr)
> colnames(est_expr)
 [1] "B cells naive"                "B cells memory"              
 [3] "Plasma cells"                 "T cells CD8"                 
 [5] "T cells CD4 naive"            "T cells CD4 memory resting"  
 [7] "T cells CD4 memory activated" "T cells follicular helper"   
 [9] "T cells regulatory (Tregs)"   "T cells gamma delta"         
[11] "NK cells resting"             "NK cells activated"          
[13] "Monocytes"                    "Macrophages M0"              
[15] "Macrophages M1"               "Macrophages M2"              
[17] "Dendritic cells resting"      "Dendritic cells activated"   
[19] "Mast cells resting"           "Mast cells activated"        
[21] "Eosinophils"                  "Neutrophils"                 
[23] "P-value"                      "Correlation"                 
[25] "RMSE"                        
> 
> other = rowSums(est_expr[,c(10,19,20,21)])
> deconv_expr[,"B"]    = rowSums(est_expr[,1:3])/0.4
> deconv_expr[,"CD4T"] = rowSums(est_expr[,5:8])/0.4
> deconv_expr[,"CD8T"] = as.matrix(est_expr[,4])/0.4
> deconv_expr[,"Treg"] = as.matrix(est_expr[,9])/0.4
> deconv_expr[,"NK"] = rowSums(est_expr[,11:12])/0.42
> deconv_expr[,"Monocyte"] = rowSums(est_expr[,13:18])/1.40
> deconv_expr[,"Neutrophil"] = as.matrix(est_expr[,22])/0.15
> deconv_expr = deconv_expr / rowSums(deconv_expr)
> 
> dim(deconv_expr)
[1] 296   7
> deconv_expr[1:2,]
          CD4T     CD8T   Monocyte         B         NK  Neutrophil       Treg
6546 0.3026044 0.119334 0.14452104 0.3564740 0.06186768 0.003329805 0.01186902
A50Z 0.1980902 0.000000 0.09683446 0.1025273 0.14200072 0.432107479 0.02843987
> 
> #---------------------------------------------------------------------
> # Compare results with different methods and with expression data
> #---------------------------------------------------------------------
> 
> eta = eta$purity
> summary(eta)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1500  0.3600  0.4800  0.5019  0.6425  0.9900 
> eta[which(eta > 0.99)] = 0.99
> 
> temp <- rownames(deconv_expr)
> deconv_expr <- diag(1-eta) %*% deconv_expr
> rownames(deconv_expr) <- temp
> 
> mu[mu < 0.05] = 0.05
> mu[mu > 0.95] = 0.95
> 
> penalty = dim(ys)[1]*(10^seq(-2,1,1)) 
> 
> methods = c("LaplaceEM","OriEM","svr","ls","rls","qp")
> rho     = array(data = NA, dim = c(ncol(ys), length(cellTypes), length(methods)),
+                 dimnames = list(colnames(ys), cellTypes, methods))
> 
> alpha   = rep(1/length(cellTypes), length(cellTypes))
> simsize = ncol(ys)
> ys <- as.matrix(ys)
> C = c(0.1,1/sqrt(10),1,sqrt(10),10)
> 
> for(j in 1:ncol(ys)){
+   if(j %% 10 == 0){ cat(j, date(), "\n") }
+   y    = ys[,j]
+   X    = as.data.frame(mu)
+   Xmat = mu
+   
+   cv_svr = rep(0,5)
+   svrmodel1       = svm(y~., data = X, kernel='linear', cost=0.1, cross=5)
+   cv_svr[1]       = mean(svrmodel1$MSE)
+   svrmodel2       = svm(y~., data = X, kernel='linear', cost=1/sqrt(10), cross=5)
+   cv_svr[2]       = mean(svrmodel2$MSE)
+   svrmodel3       = svm(y~., data = X, kernel='linear', cost=1, cross=5)
+   cv_svr[3]       = mean(svrmodel2$MSE)
+   svrmodel4       = svm(y~., data = X, kernel='linear', cost=sqrt(10), cross=5)
+   cv_svr[4]       = mean(svrmodel2$MSE)
+   svrmodel5       = svm(y~., data = X, kernel='linear', cost=10, cross=5)
+   cv_svr[5]       = mean(svrmodel5$MSE)
+   best_svr        = which.min(cv_svr)
+   svrmodel        = svm(y~., data = X, kernel='linear', cost=C[best_svr])
+   temp            = (t(svrmodel$coefs) %*% svrmodel$SV)
+   temp[temp < 0]  = 0
+   rho[j,,'svr']   = (1-eta[j])*temp/sum(temp)
+   
+   temp            = lm(y ~ .-1,data = X)$coefficients
+   temp[temp < 0]  = 0
+   rho[j,,'ls']    = (1-eta[j])*temp/sum(temp)
+   
+   temp            = rlm(y ~ .-1,data = X)$coefficients
+   temp[temp < 0]  = 0
+   rho[j,,'rls']   = (1-eta[j])*temp/sum(temp)
+   
+   A = rbind(diag(rep(1,length(cellTypes))),rep(-1,length(cellTypes)))
+   b = c(rep(0,length(cellTypes)),-1+eta[j])
+   D = t(Xmat) %*% Xmat
+   d = t(t(Xmat) %*% y)
+   rho[j,,'qp']   = (solve.QP(D,d,t(A),b)$solution)
+ }
10 Fri May 22 21:27:05 2020 
20 Fri May 22 21:27:24 2020 
30 Fri May 22 21:27:44 2020 
40 Fri May 22 21:28:05 2020 
50 Fri May 22 21:28:26 2020 
60 Fri May 22 21:28:47 2020 
70 Fri May 22 21:29:07 2020 
80 Fri May 22 21:29:27 2020 
90 Fri May 22 21:29:48 2020 
100 Fri May 22 21:30:09 2020 
110 Fri May 22 21:30:30 2020 
120 Fri May 22 21:30:52 2020 
130 Fri May 22 21:31:13 2020 
140 Fri May 22 21:31:33 2020 
150 Fri May 22 21:31:54 2020 
160 Fri May 22 21:32:15 2020 
170 Fri May 22 21:32:35 2020 
180 Fri May 22 21:32:56 2020 
190 Fri May 22 21:33:17 2020 
200 Fri May 22 21:33:38 2020 
210 Fri May 22 21:33:59 2020 
220 Fri May 22 21:34:18 2020 
230 Fri May 22 21:34:38 2020 
240 Fri May 22 21:34:59 2020 
250 Fri May 22 21:35:20 2020 
260 Fri May 22 21:35:43 2020 
270 Fri May 22 21:36:03 2020 
280 Fri May 22 21:36:24 2020 
290 Fri May 22 21:36:45 2020 
There were 50 or more warnings (use warnings() to see the first 50)
> 
> print('LaplaceEM')
[1] "LaplaceEM"
> hundrediter_laplace = cv.emeth(ys, eta, mu, aber = TRUE, V='c', init = 'default',
+                                family = 'laplace', nu = penalty, folds = 5, 
+                                maxiter = 50, verbose = TRUE)
50 Fri May 22 21:36:59 2020 
100 Fri May 22 21:36:59 2020 
150 Fri May 22 21:36:59 2020 
200 Fri May 22 21:36:59 2020 
250 Fri May 22 21:36:59 2020 
[1] "Verbose = TRUE: iteration information will be printed."
#########################################
In cross validation, folds  =  1 
nu =  9.66 
nu =  96.6 
nu =  966 
nu =  9660 
#########################################
In cross validation, folds  =  2 
nu =  9.66 
nu =  96.6 
nu =  966 
nu =  9660 
#########################################
In cross validation, folds  =  3 
nu =  9.66 
nu =  96.6 
nu =  966 
nu =  9660 
#########################################
In cross validation, folds  =  4 
nu =  9.66 
nu =  96.6 
nu =  966 
nu =  9660 
#########################################
In cross validation, folds  =  5 
nu =  9.66 
nu =  96.6 
nu =  966 
nu =  9660 
[1] "finish cross validation"
-------------------
10 Fri May 22 21:39:29 2020 
-------------------
20 Fri May 22 21:40:01 2020 
Error in optim(nu0[k], fn = function(a) { : 
  function cannot be evaluated at initial parameters
Calls: cv.emeth -> deconvEM_CV_laplace -> deconvEM_laplace -> optim
In addition: There were 50 or more warnings (use warnings() to see the first 50)
Execution halted
