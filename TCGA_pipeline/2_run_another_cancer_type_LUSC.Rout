> 
> library(data.table)
> library(scales)
> library(stringr)
> library(e1071)
> library(ggplot2)
> library(MASS)
> library(gridExtra)
> library(quantreg)
Loading required package: SparseM

Attaching package: ‘SparseM’

The following object is masked from ‘package:base’:

    backsolve

> library(quadprog)
> library(EMeth)
> library(cowplot)

********************************************************
Note: As of version 1.0.0, cowplot does not change the
  default ggplot2 theme anymore. To recover the previous
  behavior, execute:
  theme_set(theme_cowplot())
********************************************************

> library(ggpubr)

Attaching package: ‘ggpubr’

The following object is masked from ‘package:cowplot’:

    get_legend

> theme_set(theme_classic2())
> 
> args=(commandArgs(TRUE))
> args
[1] "cancer_type='LUSC'"
> 
> if (length(args) != 1) {
+   message("one argument is expected, use 'SKCM' as default.\n")
+   cancer_type = "SKCM"
+ }else{
+   eval(parse(text=args[[1]]))
+ }
> 
> ctype = tolower(cancer_type)
> cancer_type
[1] "LUSC"
> ctype
[1] "lusc"
> 
> # the raw data of DNA metylation is too large to be kept in gitHub
> # here is the local path for DNA methylation data
> path.data = "~/research/TCGA/data_EMeth"
> 
> # ------------------------------------------------------------
> # read in pure cell type data
> # ------------------------------------------------------------
> 
> path.ref = "../cell_type_specific_reference/data"
> 
> info = fread(file.path(path.ref, "methylation_pure_ct_info.txt.gz"))
> dim(info)
[1] 220886     31
> info[1:2,]
           ID       Name Infinium_Design_Type Next_Base Color_Channel
1: cg00000029 cg00000029                   II                        
2: cg00000236 cg00000236                   II                        
   Genome_Build CHR  MAPINFO Chromosome_36 Coordinate_36 Strand Probe_SNPs
1:           37  16 53468112            16      52025613      F         NA
2:           37   8 42263294             8      42382451      R         NA
   Probe_SNPs_10 Random_Loci Methyl27_Loci UCSC_RefGene_Name
1:            NA          NA            NA              RBL2
2:            NA          NA            NA       VDAC3;VDAC3
   UCSC_RefGene_Accession UCSC_RefGene_Group   UCSC_CpG_Islands_Name
1:              NM_005611            TSS1500 chr16:53468284-53469209
2: NM_005662;NM_001135694        3'UTR;3'UTR                        
   Relation_to_UCSC_CpG_Island Phantom DMR Enhancer HMM_Island
1:                     N_Shore                   NA           
2:                                               NA           
   Regulatory_Feature_Name Regulatory_Feature_Group  DHS RANGE_START RANGE_END
1:    16:53467838-53469685      Promoter_Associated TRUE    53468112  53468235
2:                                                    NA    42263294  42263417
       RANGE_GB SPOT_ID
1:  NC_000016.9      NA
2: NC_000008.10      NA
> 
> fnm = file.path(path.ref, "methylation_pure_ct_rmPC2_data_signif4.txt.gz")
> dat = fread(fnm)
> dim(dat)
[1] 220886    189
> dat[1:2,1:5]
   GSM861653 GSM861654 GSM861655 GSM861656 GSM861657
1:    0.6328    0.6211    0.6287    0.6397    0.6260
2:    0.8424    0.8050    0.8104    0.8338    0.8415
> 
> sam = fread(file.path(path.ref, "methylation_pure_ct_sample.txt"))
> dim(sam)
[1] 189   3
> sam[1:2,]
          id label   study
1: GSM861653  CD4T Reinius
2: GSM861654  CD4T Reinius
> 
> table(names(dat) == sam$id)

TRUE 
 189 
> 
> dat = data.matrix(dat)
> table(sam$label)

         B       CD4T       CD8T   Monocyte Neutrophil         NK       Treg 
         6         60         37         40         21         21          4 
> rownames(dat) = info$ID
> 
> # ------------------------------------------------------------
> # read DNA methylation data
> # ------------------------------------------------------------
> 
> fnm_data   = sprintf("%s_methylation.txt.gz", ctype)
> fnm_sample = sprintf("%s_sample_info.txt", ctype)
> 
> datM = fread(file.path(path.data, fnm_data))
> dim(datM)
[1] 396065    406
> datM[1:2, 1:5]
          cpg    X3417    X3417    X4721    X4721
1: cg00000029 0.231221 0.180251 0.311047 0.244989
2: cg00000165 0.507117 0.145625 0.399343 0.154930
> 
> sampinfo = fread(file.path(path.data, fnm_sample), header = FALSE)
> names(sampinfo) = c("id", "barcode", "patient_id")
> dim(sampinfo)
[1] 405   3
> sampinfo[1:2,]
     id      barcode patient_id
1: 3090 TCGA-18-3417       3417
2: 3091 TCGA-18-3417       3417
> 
> table(table(sampinfo$barcode))

  1   2 
327  39 
> 
> cpg = datM$cpg
> names(datM) = gsub('^X', "", names(datM))
> datM[,cpg:=NULL]
> datM = data.matrix(datM)
> rownames(datM) = cpg
> datM[1:2,1:3]
               3417     3417     4721
cg00000029 0.231221 0.180251 0.311047
cg00000165 0.507117 0.145625 0.399343
> 
> # ------------------------------------------------------------
> # read tumor purity data
> # ------------------------------------------------------------
> 
> dir0 = "TCGA_results/clinical_data/"
> fnm0 = paste0(dir0, "TCGA_mastercalls.abs_tables_JSedit.fixed.txt")
> tcga_purity = fread(fnm0)
> dim(tcga_purity)
[1] 10786    10
> tcga_purity[1:2,]
             array                       sample call status purity ploidy
1: TCGA-OR-A5J1-01 TCGA-OR-A5J1-01A-11D-A29H-01      called   0.90    2.0
2: TCGA-OR-A5J2-01 TCGA-OR-A5J2-01A-11D-A29H-01      called   0.89    1.3
   Genome doublings Coverage for 80% power Cancer DNA fraction
1:                0                      9                0.90
2:                0                      6                0.84
   Subclonal genome fraction solution
1:                      0.02      new
2:                      0.16      new
> 
> tcga_purity = tcga_purity[which(!is.na(tcga_purity$purity)),]
> dim(tcga_purity)
[1] 10642    10
> tcga_purity[1:2,]
             array                       sample call status purity ploidy
1: TCGA-OR-A5J1-01 TCGA-OR-A5J1-01A-11D-A29H-01      called   0.90    2.0
2: TCGA-OR-A5J2-01 TCGA-OR-A5J2-01A-11D-A29H-01      called   0.89    1.3
   Genome doublings Coverage for 80% power Cancer DNA fraction
1:                0                      9                0.90
2:                0                      6                0.84
   Subclonal genome fraction solution
1:                      0.02      new
2:                      0.16      new
> 
> tcga_purity$barcode = substr(tcga_purity$array, 1, 12)
> 
> # one barcode may correspond to a fe samples, here we just
> # use the first one
> uniq_barcodes = intersect(sampinfo$barcode, tcga_purity$barcode)
> length(uniq_barcodes)
[1] 358
> 
> table(sampinfo$patient_id == colnames(datM))

TRUE 
 405 
> 
> mat1 = match(uniq_barcodes, sampinfo$barcode)
> sampinfo = sampinfo[mat1,] 
> datM     = datM[, mat1]
> 
> table(sampinfo$patient_id == colnames(datM))

TRUE 
 358 
> dim(datM)
[1] 396065    358
> datM[1:2,1:4]
               3417     4721     5592     5782
cg00000029 0.231221 0.311047 0.168104 0.247827
cg00000165 0.507117 0.399343 0.743362 0.595833
> 
> purity = tcga_purity[match(uniq_barcodes, tcga_purity$barcode),]
> dim(purity)
[1] 358  11
> 
> anyNA(purity$purity)
[1] FALSE
> 
> # ------------------------------------------------------------
> # read in probes to be used
> # ------------------------------------------------------------
> 
> load(file.path(path.ref, "ref_966probes.RData"))
> ls()
 [1] "args"          "cancer_type"   "cpg"           "ctype"        
 [5] "dat"           "datM"          "dir0"          "fnm"          
 [9] "fnm_data"      "fnm_sample"    "fnm0"          "info"         
[13] "mat1"          "path.data"     "path.ref"      "probe2use"    
[17] "purity"        "sam"           "sampinfo"      "tcga_purity"  
[21] "uniq_barcodes"
> length(probe2use)
[1] 966
> length(unique(probe2use))
[1] 966
> 
> table(probe2use %in% rownames(datM))

TRUE 
 966 
> table(probe2use %in% rownames(dat))

TRUE 
 966 
> 
> X  = dat[match(probe2use, rownames(dat)),]
> dim(X)
[1] 966 189
> X[1:2,1:5]
           GSM861653 GSM861654 GSM861655 GSM861656 GSM861657
cg10472651    0.4202    0.4898    0.4347    0.5290    0.4395
cg27603015    0.6243    0.6421    0.6768    0.6456    0.7165
> 
> dim(sam)
[1] 189   3
> table(sam$id == colnames(X))

TRUE 
 189 
> 
> table(sam$label)

         B       CD4T       CD8T   Monocyte Neutrophil         NK       Treg 
         6         60         37         40         21         21          4 
> cellTypes = unique(sam$label)
> 
> # ------------------------------------------------------------
> # extract methylation data from tumor samples
> # ------------------------------------------------------------
> 
> ys = datM[match(rownames(X), rownames(datM)),]
> dim(ys)
[1] 966 358
> ys[1:2,1:5]
               3417     4721     5592     5782     5783
cg10472651 0.417565 0.619626 0.473185 0.408269 0.437077
cg27603015 0.726050 0.804605 0.829889 0.860850 0.589011
> 
> ys_no_na = which(colSums(is.na(ys)) == 0)
> 
> ys     = ys[,ys_no_na]
> purity = purity[ys_no_na,]
> 
> dim(ys)
[1] 966 332
> ys[1:2,1:5]
               3417     4721     5592     5783     5784
cg10472651 0.417565 0.619626 0.473185 0.437077 0.487562
cg27603015 0.726050 0.804605 0.829889 0.589011 0.719621
> 
> dim(purity)
[1] 332  11
> purity[1:2,]
             array                       sample call status purity ploidy
1: TCGA-18-3417-01 TCGA-18-3417-01A-01D-1439-01      called   0.31   3.69
2: TCGA-18-4721-01 TCGA-18-4721-01A-01D-1439-01      called   0.39   1.75
   Genome doublings Coverage for 80% power Cancer DNA fraction
1:                2                     44                0.45
2:                0                     20                0.36
   Subclonal genome fraction solution      barcode
1:                      0.33      new TCGA-18-3417
2:                      0.15      new TCGA-18-4721
> 
> purity$patient_id = substr(purity$barcode, 9, 12)
> table(colnames(ys) == purity$patient_id)

TRUE 
 332 
> 
> #-------------------------------------------------------------
> # Estimate Mean Matrix mu
> #-------------------------------------------------------------
> 
> mu = matrix(NA, nrow = dim(X)[1], ncol = length(cellTypes))
> s2 = matrix(NA, nrow = dim(X)[1], ncol = length(cellTypes))
> 
> row.names(mu) = row.names(s2) = rownames(X)
> colnames(mu)  = colnames(s2)  = cellTypes
> 
> for(ct in cellTypes){
+   sam.ct = unlist(sam[which(sam[,2]==ct),1])
+   dat.ct = X[,sam.ct]
+   mu[,ct] = rowMeans(dat.ct,na.rm=TRUE)
+   s2[,ct] = apply(dat.ct,1,sd,na.rm = TRUE)^2
+ }
> 
> #----------------------------------------------------------------------
> # Read Estimation from Expression Data, take intersection of the 
> # samples with cell type estimation from expression and DNA methylation
> #----------------------------------------------------------------------
> 
> fnm = sprintf('_cibersortx_results/CIBERSORTx_%s_Adjusted.txt', cancer_type)
> est_expr = fread(fnm)
> dim(est_expr)
[1] 500  26
> est_expr[1:2,]
            Mixture B cells naive B cells memory Plasma cells T cells CD8
1: TCGA.77.7142.01A    0.03271334              0  0.009323247  0.08282002
2: TCGA.77.7463.01A    0.07060336              0  0.045572959  0.02269347
   T cells CD4 naive T cells CD4 memory resting T cells CD4 memory activated
1:                 0                  0.1471637                   0.02656562
2:                 0                  0.1487676                   0.00000000
   T cells follicular helper T cells regulatory (Tregs) T cells gamma delta
1:                0.01416034                0.002159381                   0
2:                0.02626218                0.021987996                   0
   NK cells resting NK cells activated   Monocytes Macrophages M0
1:       0.01139519        0.009015598 0.007011145      0.2338995
2:       0.02863113        0.000000000 0.000000000      0.2583839
   Macrophages M1 Macrophages M2 Dendritic cells resting
1:     0.04198794      0.1837168              0.03898829
2:     0.06786873      0.1359125              0.05301762
   Dendritic cells activated Mast cells resting Mast cells activated
1:                0.01946957         0.13047280            0.0000000
2:                0.00000000         0.08852558            0.0220319
   Eosinophils Neutrophils P-value Correlation      RMSE
1:           0 0.009137449       0   0.7359314 0.7486653
2:           0 0.009741010       0   0.6029911 0.8178442
> 
> samname  = substr(est_expr$Mixture, 9, 12)
> length(samname)
[1] 500
> samname[1:5]
[1] "7142" "7463" "8143" "5782" "A53C"
> 
> est_expr = data.matrix(est_expr[,-1])
> rownames(est_expr) = samname
> dim(est_expr)
[1] 500  25
> est_expr[1:2,]
     B cells naive B cells memory Plasma cells T cells CD8 T cells CD4 naive
7142    0.03271334              0  0.009323247  0.08282002                 0
7463    0.07060336              0  0.045572959  0.02269347                 0
     T cells CD4 memory resting T cells CD4 memory activated
7142                  0.1471637                   0.02656562
7463                  0.1487676                   0.00000000
     T cells follicular helper T cells regulatory (Tregs) T cells gamma delta
7142                0.01416034                0.002159381                   0
7463                0.02626218                0.021987996                   0
     NK cells resting NK cells activated   Monocytes Macrophages M0
7142       0.01139519        0.009015598 0.007011145      0.2338995
7463       0.02863113        0.000000000 0.000000000      0.2583839
     Macrophages M1 Macrophages M2 Dendritic cells resting
7142     0.04198794      0.1837168              0.03898829
7463     0.06786873      0.1359125              0.05301762
     Dendritic cells activated Mast cells resting Mast cells activated
7142                0.01946957         0.13047280            0.0000000
7463                0.00000000         0.08852558            0.0220319
     Eosinophils Neutrophils P-value Correlation      RMSE
7142           0 0.009137449       0   0.7359314 0.7486653
7463           0 0.009741010       0   0.6029911 0.8178442
> 
> com_sample = intersect(rownames(est_expr), colnames(ys))
> length(com_sample)
[1] 330
> 
> est_expr = est_expr[match(com_sample,rownames(est_expr)),]
> dim(est_expr)
[1] 330  25
> est_expr[1:2,]
     B cells naive B cells memory Plasma cells T cells CD8 T cells CD4 naive
7142    0.03271334              0  0.009323247  0.08282002                 0
7463    0.07060336              0  0.045572959  0.02269347                 0
     T cells CD4 memory resting T cells CD4 memory activated
7142                  0.1471637                   0.02656562
7463                  0.1487676                   0.00000000
     T cells follicular helper T cells regulatory (Tregs) T cells gamma delta
7142                0.01416034                0.002159381                   0
7463                0.02626218                0.021987996                   0
     NK cells resting NK cells activated   Monocytes Macrophages M0
7142       0.01139519        0.009015598 0.007011145      0.2338995
7463       0.02863113        0.000000000 0.000000000      0.2583839
     Macrophages M1 Macrophages M2 Dendritic cells resting
7142     0.04198794      0.1837168              0.03898829
7463     0.06786873      0.1359125              0.05301762
     Dendritic cells activated Mast cells resting Mast cells activated
7142                0.01946957         0.13047280            0.0000000
7463                0.00000000         0.08852558            0.0220319
     Eosinophils Neutrophils P-value Correlation      RMSE
7142           0 0.009137449       0   0.7359314 0.7486653
7463           0 0.009741010       0   0.6029911 0.8178442
> 
> ys  = ys[,match(com_sample,colnames(ys))]
> eta = purity
> eta = eta[match(com_sample,eta$patient_id)]
> 
> dim(ys)
[1] 966 330
> ys[1:2,1:4]
               7142     7463     8143     A53C
cg10472651 0.563484 0.560531 0.615159 0.502446
cg27603015 0.836556 0.836404 0.831224 0.811290
> 
> dim(eta)
[1] 330  12
> eta[1:2,]
             array                       sample call status purity ploidy
1: TCGA-77-7142-01 TCGA-77-7142-01A-11D-2041-01      called   0.39   3.53
2: TCGA-77-7463-01 TCGA-77-7463-01A-11D-2041-01      called   0.41   4.50
   Genome doublings Coverage for 80% power Cancer DNA fraction
1:                1                     34                0.53
2:                2                     39                0.61
   Subclonal genome fraction solution      barcode patient_id
1:                      0.22      new TCGA-77-7142       7142
2:                      0.38      new TCGA-77-7463       7463
> 
> table(colnames(ys) == rownames(est_expr))

TRUE 
 330 
> table(rownames(ys) == rownames(mu))

TRUE 
 966 
> 
> #----------------------------------------------------------------------
> # collapse cell types from expression data into fewer cell types
> #----------------------------------------------------------------------
> 
> deconv_expr = matrix(NA, nrow = nrow(est_expr),ncol = length(cellTypes))
> colnames(deconv_expr) = cellTypes 
> rownames(deconv_expr) = rownames(est_expr)
> colnames(est_expr)
 [1] "B cells naive"                "B cells memory"              
 [3] "Plasma cells"                 "T cells CD8"                 
 [5] "T cells CD4 naive"            "T cells CD4 memory resting"  
 [7] "T cells CD4 memory activated" "T cells follicular helper"   
 [9] "T cells regulatory (Tregs)"   "T cells gamma delta"         
[11] "NK cells resting"             "NK cells activated"          
[13] "Monocytes"                    "Macrophages M0"              
[15] "Macrophages M1"               "Macrophages M2"              
[17] "Dendritic cells resting"      "Dendritic cells activated"   
[19] "Mast cells resting"           "Mast cells activated"        
[21] "Eosinophils"                  "Neutrophils"                 
[23] "P-value"                      "Correlation"                 
[25] "RMSE"                        
> 
> other = rowSums(est_expr[,c(10,19,20,21)])
> deconv_expr[,"B"]    = rowSums(est_expr[,1:3])/0.4
> deconv_expr[,"CD4T"] = rowSums(est_expr[,5:8])/0.4
> deconv_expr[,"CD8T"] = as.matrix(est_expr[,4])/0.4
> deconv_expr[,"Treg"] = as.matrix(est_expr[,9])/0.4
> deconv_expr[,"NK"] = rowSums(est_expr[,11:12])/0.42
> deconv_expr[,"Monocyte"] = rowSums(est_expr[,13:18])/1.40
> deconv_expr[,"Neutrophil"] = as.matrix(est_expr[,22])/0.15
> deconv_expr = deconv_expr / rowSums(deconv_expr)
> 
> dim(deconv_expr)
[1] 330   7
> deconv_expr[1:2,]
          CD4T       CD8T  Monocyte          B         NK Neutrophil
7142 0.3693294 0.16279696 0.2948919 0.08263013 0.03821038 0.04789660
7463 0.3263494 0.04231279 0.2744506 0.21661494 0.05084169 0.04843324
            Treg
7142 0.004244634
7463 0.040997412
> 
> #---------------------------------------------------------------------
> # Compare results with different methods and with expression data
> #---------------------------------------------------------------------
> 
> eta = eta$purity
> summary(eta)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1500  0.3600  0.4900  0.5059  0.6500  0.9900 
> eta[which(eta > 0.99)] = 0.99
> 
> temp = rownames(deconv_expr)
> deconv_expr = diag(1-eta) %*% deconv_expr
> rownames(deconv_expr) = temp
> 
> mu[mu < 0.05] = 0.05
> mu[mu > 0.95] = 0.95
> 
> penalty = dim(ys)[1]*(10^seq(-2,1,1)) 
> 
> methods = c("EMeth","svr","ls","rls","qp")
> rho     = array(data = NA, dim = c(ncol(ys), length(cellTypes), length(methods)),
+                 dimnames = list(colnames(ys), cellTypes, methods))
> 
> alpha   = rep(1/length(cellTypes), length(cellTypes))
> simsize = ncol(ys)
> 
> C = c(0.1,1/sqrt(10),1,sqrt(10),10)
> 
> for(j in 1:ncol(ys)){
+   if(j %% 10 == 0){ cat(j, date(), "\n") }
+   y    = ys[,j]
+   X    = as.data.frame(mu)
+   Xmat = mu
+   
+   cv_svr = rep(0,5)
+   svrmodel1       = svm(y~., data = X, kernel='linear', cost=0.1, cross=5)
+   cv_svr[1]       = mean(svrmodel1$MSE)
+   svrmodel2       = svm(y~., data = X, kernel='linear', cost=1/sqrt(10), cross=5)
+   cv_svr[2]       = mean(svrmodel2$MSE)
+   svrmodel3       = svm(y~., data = X, kernel='linear', cost=1, cross=5)
+   cv_svr[3]       = mean(svrmodel2$MSE)
+   svrmodel4       = svm(y~., data = X, kernel='linear', cost=sqrt(10), cross=5)
+   cv_svr[4]       = mean(svrmodel2$MSE)
+   svrmodel5       = svm(y~., data = X, kernel='linear', cost=10, cross=5)
+   cv_svr[5]       = mean(svrmodel5$MSE)
+   best_svr        = which.min(cv_svr)
+   svrmodel        = svm(y~., data = X, kernel='linear', cost=C[best_svr])
+   temp            = (t(svrmodel$coefs) %*% svrmodel$SV)
+   temp[temp < 0]  = 0
+   rho[j,,'svr']   = (1-eta[j])*temp/sum(temp)
+   
+   temp            = lm(y ~ .-1,data = X)$coefficients
+   temp[temp < 0]  = 0
+   rho[j,,'ls']    = (1-eta[j])*temp/sum(temp)
+   
+   temp            = rlm(y ~ .-1,data = X)$coefficients
+   temp[temp < 0]  = 0
+   rho[j,,'rls']   = (1-eta[j])*temp/sum(temp)
+   
+   A = rbind(diag(rep(1,length(cellTypes))),rep(-1,length(cellTypes)))
+   b = c(rep(0,length(cellTypes)),-1+eta[j])
+   D = t(Xmat) %*% Xmat
+   d = t(t(Xmat) %*% y)
+   rho[j,,'qp']   = (solve.QP(D,d,t(A),b)$solution)
+ }
10 Wed Dec 23 09:52:56 2020 
20 Wed Dec 23 09:53:14 2020 
30 Wed Dec 23 09:53:32 2020 
40 Wed Dec 23 09:53:49 2020 
50 Wed Dec 23 09:54:07 2020 
60 Wed Dec 23 09:54:25 2020 
70 Wed Dec 23 09:54:43 2020 
80 Wed Dec 23 09:55:01 2020 
90 Wed Dec 23 09:55:19 2020 
100 Wed Dec 23 09:55:38 2020 
110 Wed Dec 23 09:55:57 2020 
120 Wed Dec 23 09:56:16 2020 
130 Wed Dec 23 09:56:35 2020 
140 Wed Dec 23 09:56:52 2020 
150 Wed Dec 23 09:57:10 2020 
160 Wed Dec 23 09:57:29 2020 
170 Wed Dec 23 09:57:46 2020 
180 Wed Dec 23 09:58:04 2020 
190 Wed Dec 23 09:58:21 2020 
200 Wed Dec 23 09:58:39 2020 
210 Wed Dec 23 09:58:58 2020 
220 Wed Dec 23 09:59:17 2020 
230 Wed Dec 23 09:59:35 2020 
240 Wed Dec 23 09:59:53 2020 
250 Wed Dec 23 10:00:11 2020 
260 Wed Dec 23 10:00:30 2020 
270 Wed Dec 23 10:00:48 2020 
280 Wed Dec 23 10:01:06 2020 
290 Wed Dec 23 10:01:22 2020 
300 Wed Dec 23 10:01:38 2020 
310 Wed Dec 23 10:01:55 2020 
320 Wed Dec 23 10:02:11 2020 
330 Wed Dec 23 10:02:26 2020 
There were 50 or more warnings (use warnings() to see the first 50)
> 
> print('EMeth')
[1] "EMeth"
> hundrediter = cv.emeth(ys, eta, mu, aber = TRUE, V='c', init = 'default',
+                        family = 'normal', nu = penalty, folds = 5, 
+                        maxiter = 50, verbose = TRUE)
50 Wed Dec 23 10:02:28 2020 
100 Wed Dec 23 10:02:28 2020 
150 Wed Dec 23 10:02:28 2020 
200 Wed Dec 23 10:02:28 2020 
250 Wed Dec 23 10:02:28 2020 
300 Wed Dec 23 10:02:28 2020 
[1] "finish cross validation"
-------------------
10 Wed Dec 23 10:05:41 2020 
-------------------
20 Wed Dec 23 10:06:50 2020 
-------------------
30 Wed Dec 23 10:08:00 2020 
-------------------
40 Wed Dec 23 10:09:13 2020 
-------------------
50 Wed Dec 23 10:10:22 2020 
> rho[,,'EMeth'] = hundrediter[[1]]$rho
> 
> #---------------------------------------------------------------------
> # save the results
> #---------------------------------------------------------------------
> 
> dim(rho)
[1] 330   7   5
> rho[1,,]
                   EMeth        svr         ls        rls            qp
CD4T        3.423551e-01 0.11744624 0.00000000 0.00000000  4.818570e-01
CD8T       -2.948659e-17 0.10997362 0.27732461 0.29192465  0.000000e+00
Monocyte    6.504418e-02 0.16122402 0.14890235 0.13751388  3.666760e-03
B           5.448708e-02 0.11639781 0.09307805 0.10095309  8.276993e-02
NK          1.144374e-18 0.03051041 0.01552118 0.01138641 -8.728890e-18
Neutrophil  0.000000e+00 0.03049580 0.07517381 0.06822197  7.431181e-17
Treg        1.481137e-01 0.04395210 0.00000000 0.00000000  4.170631e-02
> dimnames(rho)
[[1]]
  [1] "7142" "7463" "8143" "A53C" "7656" "8048" "8624" "5241" "A59Q" "8351"
 [11] "5474" "5024" "7023" "A4AH" "8355" "7545" "8353" "A5G7" "8139" "6546"
 [21] "7579" "8503" "A5HE" "A446" "7338" "7843" "8150" "8064" "5034" "5473"
 [31] "A49D" "8035" "8201" "8288" "4613" "8148" "A4QQ" "7658" "7823" "8138"
 [41] "5489" "7822" "A5G8" "5592" "7139" "A53D" "6738" "8021" "7769" "8664"
 [51] "A53H" "A5MU" "4582" "5668" "5670" "8250" "A5GF" "A5B5" "4583" "8072"
 [61] "4601" "6143" "5021" "AASL" "6026" "A52V" "7341" "7730" "A5HO" "A4ED"
 [71] "A59J" "8491" "A5FZ" "6561" "A53B" "5039" "A59I" "7766" "8128" "7033"
 [81] "A5MH" "7697" "A4BW" "A4CN" "8170" "A4VJ" "A46L" "8580" "A5HK" "A4JC"
 [91] "A46J" "8393" "A5G1" "5232" "2709" "A56V" "5928" "5037" "8131" "6842"
[101] "7544" "7767" "6560" "8276" "8022" "5897" "8277" "8063" "5022" "A5I6"
[111] "7698" "A474" "5128" "8625" "A5MB" "5471" "8391" "7696" "5480" "8116"
[121] "7699" "5236" "A5ML" "8052" "5784" "A5HL" "A5EN" "8626" "A4E7" "5472"
[131] "A5MW" "A5M9" "8386" "5131" "6844" "8352" "8156" "2703" "5031" "A5HR"
[141] "4605" "6770" "2704" "A5HG" "6202" "A5MG" "A5IX" "A5MI" "7582" "4587"
[151] "A56U" "7340" "2697" "6771" "A5HD" "AASD" "5029" "A522" "7335" "8118"
[161] "7731" "8304" "A53L" "7811" "7710" "8481" "A512" "5485" "8305" "3920"
[171] "A5EL" "7337" "6843" "5786" "7755" "A50Z" "6798" "A5HF" "8130" "8145"
[181] "A5HT" "8582" "A4BX" "7021" "5477" "5929" "A5CT" "A4ZJ" "5239" "8390"
[191] "A5GB" "A52S" "A46N" "5036" "A5CX" "8154" "8020" "A5DS" "5481" "5787"
[201] "A4JL" "7140" "AASB" "7022" "8628" "A5HH" "8133" "8454" "8009" "A50M"
[211] "5819" "A4JB" "8007" "8309" "A475" "5030" "A5C4" "A4BY" "5783" "7020"
[221] "A5MR" "8136" "7757" "7756" "4589" "A53J" "7657" "A5MT" "A5HP" "A4CL"
[231] "5479" "5019" "A5CR" "5040" "A5G6" "A539" "6175" "5927" "8350" "A5HM"
[241] "AA0X" "A5I4" "8354" "5483" "A4EE" "8623" "8307" "3394" "4593" "7222"
[251] "5491" "A53A" "A4PA" "7622" "A5GH" "3417" "A5HQ" "8666" "5492" "A52N"
[261] "5234" "A53I" "A5MN" "A4QR" "5027" "5898" "8622" "A5GW" "8070" "8479"
[271] "5482" "6773" "8455" "7950" "A524" "A52W" "A513" "7465" "6647" "6845"
[281] "8504" "8629" "A5MY" "5011" "7580" "8023" "4586" "8388" "A5G3" "8071"
[291] "A4WN" "7141" "7454" "8065" "7812" "A5MM" "A538" "8490" "7810" "A5HJ"
[301] "7809" "A5HN" "8169" "A5MP" "8584" "A5MJ" "7557" "8287" "7223" "A510"
[311] "7107" "8144" "4609" "A52Q" "8115" "7943" "8251" "A5IB" "8083" "8153"
[321] "8049" "8456" "8140" "5028" "5240" "5596" "8308" "7964" "4721" "5478"

[[2]]
[1] "CD4T"       "CD8T"       "Monocyte"   "B"          "NK"        
[6] "Neutrophil" "Treg"      

[[3]]
[1] "EMeth" "svr"   "ls"    "rls"   "qp"   

> 
> dim(deconv_expr)
[1] 330   7
> deconv_expr[1:2,]
          CD4T       CD8T  Monocyte          B         NK Neutrophil
7142 0.2252909 0.09930615 0.1798841 0.05040438 0.02330833 0.02921692
7463 0.1925461 0.02496454 0.1619258 0.12780281 0.02999660 0.02857561
            Treg
7142 0.002589227
7463 0.024188473
> 
> save(rho, file = sprintf('TCGA_results/deconv_methy_%s.RData', cancer_type))
> save(deconv_expr, 
+      file = sprintf('TCGA_results/deconv_expr_%s.RData', cancer_type))
> 
> #---------------------------------------------------------------------
> # generate plots
> #---------------------------------------------------------------------
> 
> setwd(sprintf("_figures_%s", cancer_type))
> 
> utypes = intersect(cellTypes, colnames(deconv_expr))
> utypes
[1] "CD4T"       "CD8T"       "Monocyte"   "B"          "NK"        
[6] "Neutrophil" "Treg"      
> 
> methods = c("EMeth","svr","ls","rls","qp")
> 
> cormat = matrix(NA, nrow = length(utypes), ncol = length(methods))
> colnames(cormat) = methods
> rownames(cormat) = utypes
> 
> err <- rss <- cormat
> 
> for(i in 1:length(utypes)){
+   cormat[i,] = sapply(1:length(methods), FUN = function(j){
+     cor(rho[,utypes[i],methods[j]], deconv_expr[,utypes[i]])
+   })
+   err[i,] = sapply(1:length(methods), FUN = function(j){
+     sqrt(mean((rho[,utypes[i],methods[j]] - deconv_expr[,utypes[i]])^2))
+   }) 
+   rss[i,] = sapply(1:length(methods), FUN = function(j){
+     temp = lm(deconv_expr[,utypes[i]] ~ rho[,utypes[i],methods[j]])
+     return(sum(temp$residuals^2))
+   })
+ }
> 
> for(i in 1:length(utypes)){
+   pdf(sprintf('%s_expr_vs_methy_%s.pdf', cancer_type, utypes[i]), 
+       width=6, height=7.5)
+   
+   plist = list()
+   plist = lapply(1:length(methods), FUN = function(j){
+     tempdata = cbind(rho[,utypes[i],methods[j]],deconv_expr[,utypes[i]],eta)
+     colnames(tempdata) = c("methylation","expression","eta")
+     newplot = ggplot(data = as.data.frame(tempdata), 
+                       aes(x=methylation,y=expression,color=eta)) + 
+       xlim(0,0.3) + ylim(0,0.3) + geom_point(size=0.8) + 
+       geom_abline(intercept = 0,slope = 1) + 
+       scale_color_gradient2(limit = c(0,1), low = "blue", high = "red", 
+                             mid = "cadetblue1", midpoint = 0.5) + 
+       ggtitle(sprintf('%s on %s',methods[j],utypes[i]))
+   })
+   
+   grid.arrange(grobs = plist,ncol=2)
+   dev.off()
+   
+   fnm = sprintf('%s_plot_list_%s.RData', cancer_type, utypes[i])
+   save(plist, file = fnm)
+   
+ }
There were 29 warnings (use warnings() to see them)
> 
> #---------------------------------------------------------------------
> # Summarize correlation and RMSE
> #---------------------------------------------------------------------
> 
> pdf(sprintf('%s_box_plot_correlation.pdf', cancer_type), 
+     width=4.5, height=3.5)
> tempdata = melt(as.data.table(cormat))
Warning message:
In melt.data.table(as.data.table(cormat)) :
  id.vars and measure.vars are internally guessed when both are 'NULL'. All non-numeric/integer/logical type columns are considered id.vars, which in this case are columns []. Consider providing at least one of 'id' or 'measure' vars in future.
> colnames(tempdata) = c('Methods','Correlation')
> tempdata$cellType = rep(utypes,5)
> p1_cor = ggplot(tempdata,aes(x=Methods,y=Correlation)) + geom_boxplot() +
+   geom_point(size = 2,aes(colour = cellType)) + theme_cowplot() + 
+   ggtitle(sprintf('Correlation for %s', cancer_type))
> print(p1_cor)
> dev.off()
null device 
          1 
> 
> pdf(sprintf('%s_box_plot_RMSE.pdf', cancer_type), 
+     width=4.5, height=3.5)
> tempdata = melt(as.data.table(err))
Warning message:
In melt.data.table(as.data.table(err)) :
  id.vars and measure.vars are internally guessed when both are 'NULL'. All non-numeric/integer/logical type columns are considered id.vars, which in this case are columns []. Consider providing at least one of 'id' or 'measure' vars in future.
> colnames(tempdata) = c('Methods','RMSE')
> tempdata$cellType = rep(utypes,5)
> p2_RMSE = ggplot(tempdata,aes(x=Methods,y=RMSE)) + geom_boxplot() +
+   geom_point(size = 2,aes(colour = cellType)) + theme_cowplot() + 
+   ggtitle(sprintf('RMSE for %s', cancer_type))
> print(p2_RMSE)
> dev.off()
null device 
          1 
> 
> save(p1_cor, p2_RMSE, 
+      file=sprintf('%s_box_plot_cor_RMSE.RData', cancer_type))
> 
> print(cormat)
                EMeth         svr          ls         rls          qp
CD4T        0.1486793  0.24819954  0.07008522 -0.01447251  0.13017967
CD8T        0.6241472  0.57727131  0.58226683  0.57622473  0.51705420
Monocyte    0.7534778  0.76496171  0.78433081  0.77880528  0.68701420
B           0.8117864  0.75027275  0.77592108  0.74807397  0.79500324
NK          0.2085165  0.19704943  0.17610993  0.12904378  0.11940120
Neutrophil  0.5605181  0.54874222  0.55685194  0.55411770  0.34820525
Treg       -0.1700165 -0.03744251 -0.01039061 -0.02118289 -0.06158663
> print(err)
                EMeth        svr         ls        rls         qp
CD4T       0.12856395 0.08839332 0.14444928 0.14188931 0.21393451
CD8T       0.09156594 0.09963226 0.17197597 0.18555949 0.09291261
Monocyte   0.04989593 0.05044415 0.03641049 0.03599133 0.07848406
B          0.05426748 0.06592648 0.07315536 0.07635852 0.07542488
NK         0.03955622 0.02381565 0.02252332 0.02256439 0.02566794
Neutrophil 0.08166204 0.03961460 0.04572815 0.04283747 0.03544142
Treg       0.07438025 0.02084058 0.01962769 0.01860391 0.03717154
> print(rss)
                EMeth        svr         ls        rls         qp
CD4T       1.31782020 1.26459299 1.34099044 1.34732756 1.32477222
CD8T       0.50258016 0.54894688 0.54417787 0.54994079 0.60320048
Monocyte   0.38792109 0.37227254 0.34534295 0.35309394 0.47383864
B          0.84167118 1.07883755 0.98222064 1.08696918 0.90823161
NK         0.07136780 0.07171479 0.07229779 0.07336940 0.07354814
Neutrophil 0.19714516 0.20090011 0.19832273 0.19919594 0.25260573
Treg       0.04403402 0.04528117 0.04533984 0.04532439 0.04517275
> 
> OneMinusCorr = 1-matrix(cormat,ncol = 1, byrow = FALSE)
> RMSE = matrix(err,ncol = 1, byrow = FALSE )
> CellType = rep(cellTypes,length(methods))
> Methods = rep(methods,each = length(cellTypes))
> res = cbind.data.frame(OneMinusCorr,RMSE,CellType,Methods)
> 
> pdf(sprintf('%s_corr_vs_RMSE.pdf', cancer_type), width=5, height=4.5)
> 
> complot= ggplot(res, aes(x=OneMinusCorr,y=RMSE, color =  Methods)) + 
+   ggtitle('SKCM') + geom_point() + 
+   scale_y_continuous(trans = log2_trans(),
+                      breaks = trans_breaks('log10',function(x) 10^x),
+                      labels = trans_format('log10',math_format(10^.x))) + 
+   geom_text(label = res[,3])+xlim(0.1,1.05)
> print(complot)
Warning messages:
1: Removed 2 rows containing missing values (geom_point). 
2: Removed 2 rows containing missing values (geom_text). 
> dev.off()
null device 
          1 
> 
> save(cormat, file = sprintf('%s_metrics_cor.RData', cancer_type))
> save(err,    file = sprintf('%s_metrics_cor.RData', cancer_type))
> 
> sessionInfo()
R version 3.6.2 (2019-12-12)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Catalina 10.15.7

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] ggpubr_0.4.0.999  cowplot_1.0.0     EMeth_1.0         quadprog_1.5-8   
 [5] quantreg_5.55     SparseM_1.78      gridExtra_2.3     MASS_7.3-51.5    
 [9] ggplot2_3.3.1     e1071_1.7-3       stringr_1.4.0     scales_1.1.0     
[13] data.table_1.12.8

loaded via a namespace (and not attached):
 [1] tidyselect_1.0.0   purrr_0.3.3        haven_2.3.0        lattice_0.20-38   
 [5] carData_3.0-4      colorspace_1.4-1   vctrs_0.3.0        generics_0.0.2    
 [9] rlang_0.4.6        R.oo_1.23.0        pillar_1.4.3       R.utils_2.9.2     
[13] foreign_0.8-75     glue_1.3.1         withr_2.1.2        readxl_1.3.1      
[17] lifecycle_0.2.0    MatrixModels_0.4-1 munsell_0.5.0      ggsignif_0.6.0    
[21] gtable_0.3.0       cellranger_1.1.0   R.methodsS3_1.8.0  zip_2.0.4         
[25] labeling_0.3       rio_0.5.16         forcats_0.5.0      curl_4.3          
[29] class_7.3-15       broom_0.5.6        Rcpp_1.0.3         backports_1.1.5   
[33] abind_1.4-5        farver_2.0.3       digest_0.6.23      hms_0.5.3         
[37] stringi_1.4.5      openxlsx_4.1.5     rstatix_0.6.0      dplyr_0.8.4       
[41] grid_3.6.2         tools_3.6.2        magrittr_1.5       tibble_3.0.1      
[45] crayon_1.3.4       tidyr_1.0.2        car_3.0-8          pkgconfig_2.0.3   
[49] ellipsis_0.3.0     Matrix_1.2-18      assertthat_0.2.1   R6_2.4.1          
[53] nlme_3.1-144       compiler_3.6.2    
> gc()
            used   (Mb) gc trigger   (Mb) limit (Mb)  max used   (Mb)
Ncells   3122930  166.8    5283177  282.2         NA   5283177  282.2
Vcells 231061382 1762.9  589892501 4500.6      32768 589892440 4500.6
> 
> quit(save = 'no')
> proc.time()
    user   system  elapsed 
1039.525   88.022 1113.323 
